set nocompatible               " be iMproved
filetype off                   " required!

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set ruler

set shortmess=atI

" ignore whitespace in diff mode 
set diffopt+=iwhite

syntax on

let mapleader = ","

" vundle bundles {{{
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-endwise'
Bundle 'pangloss/vim-javascript'
Bundle 'dalefukami/vim-code-cuts'
Bundle 'airblade/vim-gitgutter'
Bundle 'wincent/Command-T'

" tComment
Bundle "tComment"
nnoremap // :TComment<CR>
vnoremap // :TComment<CR>

" SuperTab
Bundle 'ervandew/supertab'

" Ack
Bundle "ack.vim"

" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'

" snippets
"  Bundle 'garbas/vim-snipmate'
Bundle 'msanders/snipmate.vim'
"  " SnipMate Depedancies
"  Bundle "MarcWeber/vim-addon-mw-utils"
"  Bundle "tomtom/tlib_vim"
"  Bundle 'honza/snipmate-snippets'

" " Ctrl-h to complete and advance snippet
" imap <C-h>     <Plug>(neocomplcache_snippets_expand)
" smap <C-h>     <Plug>(neocomplcache_snippets_expand)


" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
" *** To install command-t
" cd ~/.vim/vundle/command-t/ruby
" ruby extconf.rb
" make

filetype plugin indent on

"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
" }}}


set foldmethod=indent
set autoindent
set smartindent

set hidden
set laststatus=2 
set statusline=[POS=%04l,%04v]\ [LEN=%L]%=%F%m%r%h%w\ \ 

" search
set hlsearch
:noremap <silent> <Space> :silent noh<Bar>echo<CR>
set incsearch
set ignorecase

set smartcase
set vb t_vb=
set title
set scrolloff=3

set ruler

" nnoremap ` '
" nnoremap ' ` 
set wildmenu

" color
set t_Co=256
set background=dark
colorscheme mike_wombat

" try clearing signcolumn for git gutter
highlight clear SignColumn


" handy control shortcuts
nnoremap <C-W>, 10<C-W><
nnoremap <C-W>. 10<C-W>>
nnoremap <C-W>- 10<C-W>-
nnoremap <C-W>+ 10<C-W>+
nnoremap <C-K> <C-W>k
nnoremap <C-J> <C-W>j
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <C-D> :qa<CR>

" better scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Wrapped lines goes down/up to next row, rather than next line in file.
nnoremap j gj
nnoremap k gk

" change working directory to that of current file.
cmap cd. lcd %:p:h

" Remap control U to search for function name
nnoremap <C-u> /function *&* *\zs

" CommandT {{{
let g:CommandTMaxFiles=20000
set wildignore+=tmp/*,public/javascripts/vendor/**,test/fixtures/public/**,public/instrumented-js/**

" ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column'

function! OpenCommandT()
    let s:file_path = expand("%:p")
    if s:file_path =~ $PROJECT_BASE_PATH."/".$CURVEPROJECT
        execute "CommandT $PROJECT_BASE_PATH/$CURVEPROJECT"
        return
    endif
    execute "CommandT"
endfunction
nnoremap <silent> <C-t> :call OpenCommandT()<CR>

:let g:CommandTMaxHeight=10
" }}}

" sudo save file
cmap w!! w !sudo tee % >/dev/null
